-# -*- coding: utf-8 -*-
.chat_room_top= raw(call_hook(:chat_room_top, :room => @room))
.audio
 %audio{:src => "#{root_path}audio/sound.mp3", :id => :audio}
.yield
 = render :partial => "shared/room_info", :locals => { :room => @room, :has_button => true }
 %div{:id => 'read-more', :class => 'read-more' }
  read more
 .message-list
  - @messages.reverse_each do |message|
   = render :partial => 'message', :locals => { :message => message }
 - if logged?
  .input
   = form_for :chat, :url => {:controller => :chat, :action => :message, :room_id => @room.id }, :html => {:class => :inputarea} do |f|
    =text_area_tag :message, '', :class => :text, :autofocus=>true, :placeholder=> t('placeholder_message')
    =submit_tag t(:send), :class => 'submit red button large', :id => 'send'
.chat_room_bottom= raw(call_hook(:chat_room_bottom, :room => @room))

= content_for :javascripts do
 = javascript_include_tag :on_the_spot
 = javascript_include_tag 'jquery.dropUploader'
 = javascript_include_tag 'jquery.readmore'
 = javascript_include_tag "jquery.websocket"
 = javascript_include_tag "jquery.multiline"
 = javascript_include_tag "jquery.onthespot"
 = javascript_include_tag "jquery.scrollTo-min"
 = javascript_include_tag "jquery.desktopnotify"
 :javascript
  $(function() {
    function autoScroll(){
      var e = $(".message-list .message:last");
      if(e.length > 0){
        $(window).scrollTo( e , 500, { easing:'swing', queue:true, axis:'y' } );
      }
    }

    // on the spot
    function onTheSpot(dom){
      // You can edit your own message
      if (dom.find('.screen-name').text() == "#{current_user.nil? ? '' : current_user.screen_name}") {
        var body = dom.find(".body");
        body.onTheSpot({
          url  : '#{url_for(:action => 'update_message_on_the_spot')}',
          data : body.attr("original")
        });
        dom.find(".edit").bind("click",function(){ body.trigger("onTheSpot::start"); });
        dom.find(".delete").bind("click",function(){
          if(confirm(#{t(:are_you_sure_you_want_to_delete_this_message).inspect})){
            // http://travisonrails.com/2009/05/20/rails-delete-requests-with-jquery
            var id = dom.attr("target");
            jQuery.post(
              '#{url_for(:controller=>'api/v1/message', :action=>'destroy')}' + '/../' + id,
              { 'id' : id, _method: 'delete' });
          }
        });
      }else{
        dom.find(".own-message").hide();
      }

      // show edit button
      dom.hover(function(e) {
        $(this).find('.edit-icons').fadeIn();
      },function(e){
        $(this).find('.edit-icons').fadeOut();
      });
    }
    $(".message").each(function(_, e){
      onTheSpot( $(e) );
    });

    // make div.message from object
    function makeElement(message){
      var dom = $(message.view);
      onTheSpot(dom);
      return dom;
    }
    $(".message-list").webSocket({ makeElement : makeElement,
                                   entry : 'ws://' + location.hostname + ':#{WebsocketConfig.websocketPort}/room?id=#{@room.id}'});

    // read more button
    $("#read-more").readMore({
      id : function(){ return $(".message").first().attr("target"); },
      container : ".message-list",
      content : ".message",
      url : "#{url_for(:action => :prev)}",
      indicator : #{image_tag('ajax-loader.gif').inspect},
      onLoad : function(messages){ messages.each(function(_, e){ onTheSpot($(e)); }); }
    });


    // messages send
    $('textarea#message').multiline();
    $(".message-list").bind('websocket::connect', function(_, ws){
      $('form.inputarea').bind('submit', function(e){
        e.stopPropagation();
        e.preventDefault();
        jQuery.post(
         '#{url_for(:controller=>'api/v1/message', :action=>'create')}',
         { 'room_id' : '#{@room.id}',
           'message' : $('textarea#message').val()});
        $('textarea#message').val('');
      });
    });

    // show status of websocket
    $(".message-list").bind('websocket::connect', function(){
      $("img.websocket-status").attr('src', '#{image_path('connection.gif')}');
    });
    $(".message-list").bind('websocket::error', function(){
      $("img.websocket-status").attr('src', '#{image_path('connection_fail.gif')}');
    });

    // scroll after loaded
    $(".message-list").bind('websocket::create', function(){
       autoScroll();
    });
    function scrollAfterImage(e){
      $(".attachment img", e).bind("load", function(){
        autoScroll();
      });
    }
    autoScroll();
    scrollAfterImage($(".message-list"))

    // message notification
    $(".message-list").bind('websocket::create', function(_, message){
      if(message.screen_name != "#{current_user.nil? ? '' : current_user.screen_name}") {
        $.fn.desktopNotify({
            picture: message.profile_image_url,
            title: message.name,
            text : (message.attachment != null ? message.attachment.filename : message.body)
        });
      }
      document.getElementById("audio").load();
      document.getElementById("audio").play();
    });

    // File DnD
    uploadConfig = {
      action : "#{url_for(:controller => 'chat', :action => 'message')}",
      params : [{ room_id : '#{@room.id}'},
                 { authenticity_token: '#{ form_authenticity_token }'}],
      onProgress : function(value){
          console.log(value);
      },
      onPartialError : function(){
      },
      onComplete : function(){
      }
    };
    $('.message-list').dropUploader(uploadConfig);
    $('#message').dropUploader(uploadConfig);
  });

